#!/bin/bash -e

CONF_PATH="/etc/s3_sync"
EXAMPLE_CONF='
# This file must end in ".conf" to be read by the service

# Name for adding and removing features
name="name"

# Bucket name (required)
#   If the bucket does not exist it will be created
bucket_name="bucket"

# Directory to sync (required)
syncdir="/path/to/file/directory"

# Synchronize down from S3, may overwrite or delete files.
# Options:
#   hourly
#   daily
#   weekly
#   monthly
syncdown="hourly"

# Set ownership for files after sync down
owner="user"

# Set group ownership for files after sync down
group="www-data"

# Set permissions
permissions="770"
'

function usage
  {
    echo -e "usage: s3_sync start|restart|stop|install"
  }


function set_conf
  {
    set -u
    grep -rl 's3_sync_file' /etc/cron.d/ | xargs -r rm
    for i in "$CONF_PATH/*.conf"; do
      source $i
      echo "Setting up sync for $bucket_name from $syncdir"

      set_bucket $bucket_name
      if [[ -n "$syncdown" ]]; then
      {
        case $syncdown in
          hourly )
            freq="0 * * * *"
            ;;
          daily )
            freq="0 1 * * *"
            ;;
          weekly )
            freq="0 1 * * 6"
            ;;
          monthly )
            freq="0 1 1 * *"
            ;;
          * )
            echo "Invalid frequency: $syndcdown"
            exit
        esac
        if [[ -n "$freq" ]]; then
        {
          echo "Setting cronjob for $bucket_name"
          cronline="$freq s3cmd sync --no-progress -r --delete-removed s3://$bucket_name $syncdir"
          if [[ -n "$owner" ]] && [[ -z "$group" ]]; then
          {
            cronline="$cronline && chown -r $owner:$group $syncdir"
          }
          fi
          if [[ -n "$permissions" ]]; then
          {
            cronline="$cronline && chmod -r $permissions $syncdir"
          }
          fi
          cronline="s3_sync unset $syncdir && $cronline"
          cronline="$cronline && s3_sync set $syncdir $bucket_name"
          echo "#s3_sync_file" > /etc/cron.d/s3_sync_$name
          echo "$cronline" >> /etc/cron.d/s3_sync_$name
        }
        fi
      }
      fi
      set_monitor $syncdir $bucket_name&
      unset freq
      unset name
      unset bucket_name
      unset syncdir
      unset syncdown
      unset owner
      unset group
      unset permissions
    done
    set +u
  }

function set_bucket
  {
    value=$(s3cmd ls|grep --quiet "s3://$1$")
    if [[ -z "$value" ]]; then
    {
      echo "Bucket already exists for $1"
    }
    else
    {
      echo "Creating bucket $1"
      s3cmd mb s3://$1
    }
    fi
  }

function set_monitor
  {
    inotifywait\
      -m\
      --format "%w"\
      -e modify\
      -e move\
      -e moved_to\
      -e moved_from\
      -e create\
      -e delete\
      -r\
      "$1"\
      |
    while read change; do
      s3cmd sync --no-progress -r --delete-removed $1 s3://$2/
    done
  }

function kill_monitors
  {
    for i in "$CONF_PATH/*.conf"; do
      source $i
      echo "Stopping sync for $bucket_name from $syncdir"
      kill $(ps -aux | grep "inotifywait .* $syncdir$" | awk '{print $2}')
    done
  }

function kill_monitor
  {
    kill $(ps -aux | grep "inotifywait .* $1$" | awk '{print $2}')
    done
  }

function install_s3_sync
  {
    if [[ $EUID -ne 0 ]]; then
      echo "This script must be run as root"
      exit
    fi
    s3cmd=$(type -t s3cmd)
    if [[ "$s3cmd" != "file" ]]; then
      echo "s3cmd must be installed"
      exit
    fi
    mkdir $CONF_PATH
    echo $EXAMPLE_CONF > $CONF_PATH/example_config
  }

case $1 in
  start )
    set_conf
    ;;
  restart )
    kill_monitors
    set_conf
    ;;
  stop )
    kill_monitors
    ;;
  set )
    set_monitor $2 $3
    ;;
  unset )
    kill_monitor $2
    ;;
  install )
    install_s3_sync
    ;;
  * )
    usage
    exit
esac
