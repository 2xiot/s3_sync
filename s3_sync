#!/bin/bash -e

# Change to path where s3_sync files should reside
CONF_PATH="/etc/s3_sync"
EXAMPLE_CONF="
# This file must end in \".conf\" to be read by the service
# All fields are required!
# Unused field should be set as an empty string.
# value=

# Name for adding and removing features
name=\"name\"

# Bucket name
#   If the bucket does not exist it will be created
bucket_name=\"bucket\"

# Directory to sync
syncdir=\"/path/to/file/directory\"

# Synchronize down from S3, may overwrite or delete files.
# Options:
#   hourly
#   daily
#   weekly
#   monthly
syncdown=\"hourly\"

# Set ownership for files after sync down
owner=\"user\"

# Set group ownership for files after sync down
group=\"www-data\"

# Set permissions
permissions=\"770\"
"

# Function to define usage if proper values are not provided.
function usage
  {
    echo -e "usage: s3_sync start|restart|stop|install"
  }


# Function to set configurations.
# TODO Break out to smaller functions.
function set_conf
  {
    # Check to see if any configs exist.
    # If none exist error out.
    configs=$(ls -l $CONF_PATH/*.conf 2> /dev/null|wc -l)
    if [[ $configs -eq 0 ]]; then
      echo "No configurations found."
      exit
    fi
    # Error on missing values.
    set -u

    # Remove all cron jobs.
    grep -rl 's3_sync_file' /etc/cron.d/ | xargs -r rm

    # Loop through all configs.
    for i in "$CONF_PATH/*.conf"; do
      source $i
      echo -e "\n*  Setting up sync for $bucket_name from $syncdir  *\n"
      # Create bucket if it does not exists.
      set_bucket $bucket_name

      # If syncdown is set a cron job will be built.
      if [[ -n "$syncdown" ]]; then
      {
        case $syncdown in
          hourly )
            freq="0 * * * * root"
            ;;
          daily )
            freq="0 1 * * * root"
            ;;
          weekly )
            freq="0 1 * * 6 root"
            ;;
          monthly )
            freq="0 1 1 * * root"
            ;;
          * )
            echo -e "Invalid frequency: $syndcdown \nFor $name\n"
            exit
        esac
        if [[ -n "$freq" ]]; then
        {
          echo -e "\n*  Setting cronjob for $bucket_name  *\n"
          cronline="s3cmd -c $CONF_PATH/.s3cfg sync --no-progress -r --delete-removed s3://$bucket_name $syncdir/ >> /var/log/s3_sync.log"
          # If owner and group is set change permissions for files.
          if [[ -n "$owner" ]] && [[ -n "$group" ]]; then
          {
            cronline="$cronline && chown -R $owner:$group $syncdir"
          }
          fi
          # If permissions are set change the permissions.
          if [[ -n "$permissions" ]]; then
          {
            cronline="$cronline && chmod -R $permissions $syncdir"
          }
          fi
          # Set cron to turn off active inotifywait to prevent syncing to occur twice.
          cronline="s3_sync unset $syncdir && $cronline"
          # Reset standard running daemon
          cronline="$freq $cronline && s3_sync set $syncdir $bucket_name"
          # Set tag in file to easily reset cron files with grep
          echo "#s3_sync_file" > /etc/cron.d/s3_sync_$name
          # Needed so cron will execute
          echo "PATH=$PATH" >> /etc/cron.d/s3_sync_$name
          # Set cron
          echo "$cronline" >> /etc/cron.d/s3_sync_$name
        }
        fi
      }
      fi
      # Set monitors
      set_monitor $syncdir $bucket_name&
      # Unset values so script will error out on misconfigured conf files
      unset freq
      unset name
      unset bucket_name
      unset syncdir
      unset syncdown
      unset owner
      unset group
      unset permissions
    done
    #load new cron jobs
    service cron restart
    # Return set
    set +u
  }

# Function to set bucket in s3 if it does not exist.
# $1 = bucket_name
function set_bucket
  {
    value=$(s3cmd -c $CONF_PATH/.s3cfg ls|grep --quiet "s3://$1$")
    if [[ -z "$value" ]]; then
    {
      echo -e "\n*  Bucket already exists for $1  *\n"
    }
    else
    {
      echo -e "\n*  Creating bucket for $1  *\n"
      s3cmd -c $CONF_PATH/.s3cfg mb s3://$1
    }
    fi
  }

# Function to set inotify functions daemons
# $1 = folder to watch
# $2 = bucket_name
function set_monitor
  {
    inotifywait\
      -m\
      --format "%w"\
      -e modify\
      -e move\
      -e moved_to\
      -e moved_from\
      -e create\
      -e delete\
      -r\
      -s\
      "$1"\
      |
    while read change; do
      s3cmd -c $CONF_PATH/.s3cfg sync --no-progress -r --delete-removed $1/ s3://$2 >> /var/log/s3_sync.log
    done
  }

# Function to unset all jobs and delete all cron jobs.
function kill_monitors
  {
    for i in "$CONF_PATH/*.conf"; do
      source $i
      echo -e "\n*  Stopping sync for $bucket_name from $syncdir  *\n"
      #delete all pids set for inotify wait on a specific folder.
      pid=$(ps aux | grep "inotifywait .* $syncdir$" | awk '{print $2}')
      if [[ -n "$pid" ]]; then
        kill $pid
      fi
    done
    # Delete all cron jobs.
    grep -rl 's3_sync_file' /etc/cron.d/ | xargs -r rm
  }

# Function to kill monitor while cron runs.
# $1 = folder to watch
function kill_monitor
  {
    pid=$(ps aux | grep "inotifywait .* $1$" | awk '{print $2}')
    if [[ -n "$pid" ]]; then
      kill $pid
    fi
  }

# Function to install.
function install_s3_sync
  {
    # Check if s3cmd is installed.
    s3cmd=$(type -t s3cmd)
    if [[ "$s3cmd" != "file" ]]; then
      echo "s3cmd must be installed"
      exit
    fi
    # Make folder for config files.
    if [[ ! -d "$CONF_PATH" ]]; then
      mkdir $CONF_PATH
    fi
    # Walk user through configuration.
    s3cmd -c $CONF_PATH/.s3cfg --configure
    # Make sample config file.
    if [[ ! -f "$CONF_PATH/example_config" ]]; then
      echo -e "$EXAMPLE_CONF" > $CONF_PATH/example_config
    fi
    # Copy this file to usr sbin.
    if [[ ! -f "/usr/sbin/s3_sync" ]]; then
      cp $0 /usr/sbin/s3_sync
    fi
  }

# Start script.

# This can only be run as root
if [[ $EUID -ne 0 ]]; then
  echo "This script must be run as root"
  exit
fi

# Parse  arguments
case $1 in
  start )
    set_conf
    ;;
  restart )
    kill_monitors
    set_conf
    ;;
  stop )
    kill_monitors
    ;;
  set )  # not meant for user consumption
    set_monitor $2 $3
    ;;
  unset ) # not meant for user consumption
    kill_monitor $2
    ;;
  install )
    install_s3_sync
    ;;
  * )
    usage
    exit
esac
